// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
insert into product (name, description, price, stock, brand_id)
values ($1, $2, $3, $4, $5)
returning product_id, name, description, price, stock, created_at, updated_at, deleted_at, brand_id
`

type CreateProductParams struct {
	Name        string
	Description string
	Price       pgtype.Numeric
	Stock       int32
	BrandID     uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.BrandID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BrandID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
update product
set deleted_at = now()
where product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
select product_id, name, description, price, stock, created_at, updated_at, deleted_at, brand_id from product
where product_id = $1
and deleted_at is null
`

func (q *Queries) GetProduct(ctx context.Context, productID uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BrandID,
	)
	return i, err
}

const isBrandUsed = `-- name: IsBrandUsed :one
select exists(
    select 1 from product
    where brand_id = $1
    and deleted_at is null
)
`

func (q *Queries) IsBrandUsed(ctx context.Context, brandID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isBrandUsed, brandID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateProduct = `-- name: UpdateProduct :one
update product
set name = $2, description = $3, price = $4, stock = $5, brand_id = $6
where product_id = $1
returning product_id, name, description, price, stock, created_at, updated_at, deleted_at, brand_id
`

type UpdateProductParams struct {
	ProductID   uuid.UUID
	Name        string
	Description string
	Price       pgtype.Numeric
	Stock       int32
	BrandID     uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.BrandID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BrandID,
	)
	return i, err
}
