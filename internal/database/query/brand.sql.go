// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brand.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const createBrand = `-- name: CreateBrand :one
insert into brand (name)
values ($1)
returning brand_id, name, created_at, updated_at, deleted_at
`

func (q *Queries) CreateBrand(ctx context.Context, name string) (Brand, error) {
	row := q.db.QueryRow(ctx, createBrand, name)
	var i Brand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBrand = `-- name: DeleteBrand :exec
update brand set deleted_at = now()
where brand_id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, brandID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBrand, brandID)
	return err
}

const getBrand = `-- name: GetBrand :one
select brand_id, name, created_at, updated_at, deleted_at from brand
where brand_id = $1
and deleted_at is null
`

func (q *Queries) GetBrand(ctx context.Context, brandID uuid.UUID) (Brand, error) {
	row := q.db.QueryRow(ctx, getBrand, brandID)
	var i Brand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateBrand = `-- name: UpdateBrand :one
update brand set name = $2
where brand_id = $1
returning brand_id, name, created_at, updated_at, deleted_at
`

type UpdateBrandParams struct {
	BrandID uuid.UUID
	Name    string
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (Brand, error) {
	row := q.db.QueryRow(ctx, updateBrand, arg.BrandID, arg.Name)
	var i Brand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
